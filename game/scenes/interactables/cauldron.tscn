[gd_scene load_steps=26 format=2]

[ext_resource path="res://assets/models/cauldron_matrix/cauldron_matrix.gltf" type="PackedScene" id=1]
[ext_resource path="res://scenes/components/interaction_helper.gd" type="Script" id=2]
[ext_resource path="res://addons/godot_helper_pack/core/3d/outline_helper_3d.gd" type="Script" id=3]
[ext_resource path="res://scenes/ui/components/interaction_progress_bar_3d.tscn" type="PackedScene" id=4]
[ext_resource path="res://scenes/interactables/cauldron.gd" type="Script" id=5]
[ext_resource path="res://assets/sounds/sfx_cauldron_interaction_start_loop_jdymusic.mp3" type="AudioStream" id=6]
[ext_resource path="res://assets/sounds/sfx_cauldron_interaction_complete_jdymusic.mp3" type="AudioStream" id=7]
[ext_resource path="res://assets/sounds/sfx_cauldron_interaction_interupt_jdymusic.mp3" type="AudioStream" id=8]
[ext_resource path="res://assets/images/healthbar_frame_ilikethepixies.png" type="Texture" id=9]

[sub_resource type="CylinderShape" id=1]
radius = 1.25

[sub_resource type="Shader" id=9]
code = "shader_type spatial;

render_mode unshaded, shadows_disabled;

//uniform vec4 border_color : hint_color = vec4(.0, .0, .0, 1.);
uniform vec4 background_color : hint_color = vec4(.0, .0, .0, 1.);
uniform vec4 progress_color : hint_color = vec4(.0, 1., .0, 1.);
uniform float progress_value : hint_range(0.0, 1.0, 0.02) = .5;

void vertex()
{
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
}

void fragment()
{
	vec2 border = vec2(0.01, 0.1);

	vec2 mask2 = step(border, UV) * step(UV, 1.0-border);
    float mask = mask2.x*mask2.y;

	//float progress = .5;
    float blend = ((UV.x - progress_value) <= 0.0 ? 1.0 : 0.0) * mask;
    vec4 fragColor = progress_color*blend + background_color*(1.0-blend);
	ALBEDO = fragColor.rgb;

}"

[sub_resource type="ShaderMaterial" id=38]
shader = SubResource( 9 )
shader_param/background_color = Color( 0.584314, 0.584314, 0.584314, 1 )
shader_param/progress_color = Color( 1, 0.752941, 0.0117647, 1 )
shader_param/progress_value = 0.0

[sub_resource type="QuadMesh" id=11]
resource_local_to_scene = true
material = SubResource( 38 )
size = Vector2( 2, 0.2 )

[sub_resource type="SpatialMaterial" id=37]
flags_transparent = true
flags_unshaded = true
params_billboard_mode = 1
albedo_texture = ExtResource( 9 )

[sub_resource type="QuadMesh" id=36]
material = SubResource( 37 )
size = Vector2( 2.05, 0.3 )

[sub_resource type="SphereMesh" id=26]
radius = 1.3

[sub_resource type="Shader" id=24]
code = "/*
	炎シェーダー by あるる（きのもと 結衣）
	Fire Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type spatial;
render_mode depth_draw_opaque, unshaded, shadows_disabled;

uniform sampler2D noise_tex : hint_white;
uniform vec4 root_color : hint_color = vec4( 1.0, 0.75, 0.3, 1.0 );
uniform vec4 tip_color : hint_color = vec4( 1.0, 0.03, 0.001, 1.0 );

uniform float fire_alpha : hint_range( 0.0, 1.0 ) = 1.0;
uniform vec2 fire_speed = vec2( 0.0, 1.0 );
uniform float fire_aperture : hint_range( 0.0, 3.0 ) = 3.0;

/*
	noise_texを使わないパターン

float random( vec2 pos )
{ 
	return fract(sin(dot(pos, vec2(12.9898,78.233))) * 43758.5453);
}

float value_noise( vec2 pos )
{
	vec2 p = floor( pos );
	vec2 f = fract( pos );

	float v00 = random( p + vec2( 0.0, 0.0 ) );
	float v10 = random( p + vec2( 1.0, 0.0 ) );
	float v01 = random( p + vec2( 0.0, 1.0 ) );
	float v11 = random( p + vec2( 1.0, 1.0 ) );

	vec2 u = f * f * ( 3.0 - 2.0 * f );

	return mix( mix( v00, v10, u.x ), mix( v01, v11, u.x ), u.y );
}

float procedural_noise_tex( vec2 shifted_uv )
{
	return (
		value_noise( shifted_uv * 0.984864 ) * 20.0
	+	value_noise( shifted_uv * 2.543 ) * 10.0
	+	value_noise( shifted_uv * 9.543543 ) * 8.0
	+	value_noise( shifted_uv * 21.65436 ) * 5.0
	+	value_noise( shifted_uv * 42.0 ) * 2.0
	+	value_noise( shifted_uv * 87.135148 ) * 2.0
	+	value_noise( shifted_uv * 340.66534654 )
	) / 48.0;
}
*/

void fragment( )
{
	vec2 shifted_uv = UV + TIME * fire_speed;
	float fire_noise = texture( noise_tex, shifted_uv ).r;
	float noise = UV.y * ( ( ( UV.y + fire_aperture ) * fire_noise - fire_aperture ) * 75.0 );
	vec4 fire_color = mix( tip_color, root_color, noise * 0.05 );

	ALPHA = clamp( noise, 0.0, 1.0 ) * fire_alpha;
	ALBEDO = fire_color.rgb;
}"

[sub_resource type="OpenSimplexNoise" id=27]
period = 32.0
persistence = 0.73
lacunarity = 2.58

[sub_resource type="NoiseTexture" id=28]
seamless = true
noise = SubResource( 27 )

[sub_resource type="ShaderMaterial" id=25]
shader = SubResource( 24 )
shader_param/root_color = Color( 1, 0.75, 0.3, 1 )
shader_param/tip_color = Color( 1, 0.03, 0.001, 1 )
shader_param/fire_alpha = 1.0
shader_param/fire_speed = Vector2( 0, 0.5 )
shader_param/fire_aperture = 3.0
shader_param/noise_tex = SubResource( 28 )

[sub_resource type="Curve" id=29]
_data = [ Vector2( 0, 0.362245 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=30]
curve = SubResource( 29 )

[sub_resource type="ParticlesMaterial" id=31]
emission_shape = 5
emission_ring_radius = 0.5
emission_ring_inner_radius = 0.0
emission_ring_height = 0.1
emission_ring_axis = Vector3( 0, 1, 0 )
gravity = Vector3( 0, 0, 0 )
tangential_accel = 0.3
tangential_accel_random = 0.27
scale_curve = SubResource( 30 )

[sub_resource type="SpatialMaterial" id=32]
flags_unshaded = true
albedo_color = Color( 0.658824, 1, 0.682353, 1 )

[sub_resource type="SphereMesh" id=33]
material = SubResource( 32 )
radius = 0.1
height = 0.2

[node name="Cauldron" type="StaticBody"]
collision_layer = 3
script = ExtResource( 5 )

[node name="cauldron_matrix" parent="." instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )
shape = SubResource( 1 )

[node name="OutlineHelper3D" type="Node" parent="."]
script = ExtResource( 3 )
mesh_instances_to_outline = [ NodePath("../cauldron_matrix/Sphere") ]
select_on_click = false
button_index = 2
mouse_over_color = Color( 1, 0.631373, 0, 1 )

[node name="InteractionProgressBar3d" parent="." instance=ExtResource( 4 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.50224, 0 )
visible = false
mesh = SubResource( 11 )
value = 0.0
max_value = 30.0
progress_color = Color( 1, 0.752941, 0.0117647, 1 )
speed_regain_on_active_spell = 0.5

[node name="MeshInstance" type="MeshInstance" parent="InteractionProgressBar3d"]
mesh = SubResource( 36 )

[node name="InteractionHelper" type="Node" parent="."]
script = ExtResource( 2 )
outline_helper = NodePath("../OutlineHelper3D")
interaction_progress_bar = NodePath("../InteractionProgressBar3d")
interaction_start_sound = NodePath("../StartInteractionSound")
interaction_interupt_sound = NodePath("../InteruptInteractionSound")
interaction_complete_sound = NodePath("../CompleteInteractionSound")
delay_completion_seconds = 1.0

[node name="StartInteractionSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
volume_db = -20.0
bus = "SoundFx"

[node name="InteruptInteractionSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 8 )
volume_db = -15.0
bus = "SoundFx"

[node name="CompleteInteractionSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 7 )
volume_db = -16.0
bus = "SoundFx"

[node name="FireMeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.41292, 0 )
mesh = SubResource( 26 )
material/0 = SubResource( 25 )

[node name="Tween" type="Tween" parent="."]

[node name="BubbleParticles" type="Particles" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.94442, 0 )
emitting = false
amount = 16
visibility_aabb = AABB( -0.509766, -0.5, -0.5, 1, 1, 1 )
process_material = SubResource( 31 )
draw_pass_1 = SubResource( 33 )

[connection signal="interaction_completed" from="InteractionHelper" to="." method="_on_InteractionHelper_interaction_completed"]
[connection signal="interaction_completion_began" from="InteractionHelper" to="." method="_on_InteractionHelper_interaction_completion_began"]
[connection signal="interaction_interrupted" from="InteractionHelper" to="." method="_on_InteractionHelper_interaction_interrupted"]
[connection signal="interaction_started" from="InteractionHelper" to="." method="_on_InteractionHelper_interaction_started"]

[editable path="cauldron_matrix"]
