[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=10]
code = "shader_type spatial;
render_mode cull_front, unshaded;

uniform vec4 outline_color : hint_color = vec4(1.0);
uniform float outline_width = 1.0;

void vertex() {
	if(outline_width > 0.0) {
		vec4 clip_position = PROJECTION_MATRIX * (MODELVIEW_MATRIX * vec4(VERTEX, 1.0));
		vec3 clip_normal = mat3(PROJECTION_MATRIX) * (mat3(MODELVIEW_MATRIX) * NORMAL);
		
		vec2 offset = normalize(clip_normal.xy) / VIEWPORT_SIZE * clip_position.w * outline_width * 2.0;
		
		clip_position.xy += offset;
		
		POSITION = clip_position;
	}
}

void fragment() {
	if(outline_width > 0.0) {
		ALBEDO = outline_color.rgb;
		if (outline_color.a < 1.0) {
			ALPHA = outline_color.a;
		}
	}
}"

[resource]
resource_local_to_scene = true
shader = SubResource( 10 )
shader_param/outline_color = Color( 1, 1, 1, 1 )
shader_param/outline_width = 1.0
